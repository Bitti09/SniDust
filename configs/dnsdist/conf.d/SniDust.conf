function string.starts(String, Start)
    return string.sub(String, 1, string.len(Start)) == Start
end

function trim(s)
    return s:match "^%s*(.*%S)" or ""
end

-- read all the domains in a set
function LoadBlocklist(smn, file)
    local f = io.open(file, "r")
    if f ~= nil then
        for domain in io.lines(file) do
            -- trim string
            domain = trim(domain)
            -- check if domain is valid
            if domain ~= nil and string.len(domain) > 0 and not string.starts(domain, "#") then
                local parseTest = pcall(newDNSName, domain)
                if parseTest then
                    smn:add(newDNSName(domain))
                    infolog("[SniDust] Adding domain " .. domain .. " to list")
                else
                    warnlog("[SniDust] Failed to parse/add domain " .. domain .. " => Skipping")
                end
            end
        end
        io.close(f)
    else
        errlog("[SniDust] The domain list is missing or inaccessible!")
    end
end

function ReloadBlocklist(dq)
    infolog("[SniDust] Reloading blocklist...")

    -- prevent the query from going upstream
    dq.dh:setQR(true)

    BlockNode = newSuffixMatchNode()

    -- load
    LoadBlocklist(BlockNode, "/tmp/domains.lst")

    infolog("[SniDust] Blocklist reload complete")

    -- respond with a local address just in case
    return DNSAction.Spoof, "127.0.0.7"
end

function ReloadACL(dq)
    -- prevent the query from going upstream
    dq.dh:setQR(true)

    infolog("[SniDust] Reloading ACL...")
    setACLFromFile("/etc/dnsdist/allowedClients.acl")
    infolog("[SniDust] ACL reload complete!")

    -- respond with a local address just in case
    return DNSAction.Spoof, "127.0.0.7"
end

BlockNode = newSuffixMatchNode()

infolog("[SniDust] Loading Blocklist...")
LoadBlocklist(BlockNode, "/tmp/domains.lst")
infolog("[SniDust] Complete!")
